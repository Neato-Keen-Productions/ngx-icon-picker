{"version":3,"sources":["../../src/lib/search-icon.pipe.ts"],"names":[],"mappings":";;AAAA,sCAAoD;AAKpD;IAAA;IAsCA,CAAC;IApCC,kCAAS,GAAT,UAAU,KAAa,EAAE,MAAc;QAAvC,iBAuBC;QAtBC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;YACtB,IAAI,IAAI,GAAG,KAAK,CAAC;YACjB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACd,IAAI,GAAG,IAAI,IAAI,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC7D,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;gBACZ,IAAI,GAAG,IAAI,IAAI,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC3D,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChB,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAvC,CAAuC,CAAC,CAAC;YACpF,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjB,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAvC,CAAuC,CAAC,CAAC;YACrF,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAED,8BAAK,GAAL,UAAM,KAAa;QACjB,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;IASH,qBAAC;AAAD,CAtCA,AAsCC;AARM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,WAAI,EAAE,IAAI,EAAE,CAAC;gBACnB,IAAI,EAAE,YAAY;aACnB,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AArCW,wCAAc","file":"search-icon.pipe.js","sourceRoot":"","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { Icon } from './icon';\n\n\n\nexport class SearchIconPipe implements PipeTransform {\n\n  transform(value: Icon[], search: string): any {\n    if (!search) {\n      return value;\n    }\n\n    const searchValue = this.clean(search);\n\n    return value.filter(icon => {\n      let keep = false;\n      if (icon.name) {\n        keep = keep || this.clean(icon.name).includes(searchValue);\n      }\n      if (icon.id) {\n        keep = keep || this.clean(icon.id).includes(searchValue);\n      }\n      if (icon.filter) {\n        keep = keep || icon.filter.some(value => this.clean(value).includes(searchValue));\n      }\n      if (icon.aliases) {\n        keep = keep || icon.aliases.some(value => this.clean(value).includes(searchValue));\n      }\n      return keep;\n    });\n  }\n\n  clean(value: string): string {\n    return value.trim().toLowerCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'searchIcon'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}